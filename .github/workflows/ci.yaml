name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  Security:
    name: Security Pipeline
    uses: uc-cdis/.github/.github/workflows/securitypipeline.yaml@master
    with:
       python-poetry: 'false'
    secrets: inherit

  UnitTest:
    name: Python Unit Test with Postgres
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: automated_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Set Port
        run: |
          ls -al /etc/postgresql/14/main/
          sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/14/main/postgresql.conf
          sudo service postgresql restart 14

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python -
          which poetry
          poetry install -vv --no-interaction
          poetry show -vv

      - name: Setup script
        run: poetry run python bin/destroy_and_setup_psqlgraph.py

      - name: Run Tests
        run: poetry run pytest -vvv

  ImageBuildAndPush:
    name: Build Image and Push
    uses: uc-cdis/.github/.github/workflows/image_build_push.yaml@master
    secrets:
      ECR_AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
      ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      QUAY_ROBOT_TOKEN: ${{ secrets.QUAY_ROBOT_TOKEN }}
